// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProvider)(nil).Close))
}

// CreateQueue mocks base method.
func (m *MockProvider) CreateQueue(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueue", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CreateQueue indicates an expected call of CreateQueue.
func (mr *MockProviderMockRecorder) CreateQueue(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueue", reflect.TypeOf((*MockProvider)(nil).CreateQueue), name)
}

// PushMessage mocks base method.
func (m *MockProvider) PushMessage(queueName, messageType string, message interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushMessage", queueName, messageType, message)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PushMessage indicates an expected call of PushMessage.
func (mr *MockProviderMockRecorder) PushMessage(queueName, messageType, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessage", reflect.TypeOf((*MockProvider)(nil).PushMessage), queueName, messageType, message)
}
